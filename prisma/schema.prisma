// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Schema

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Database

model User {
  id            String    @id @default(cuid())
  name          String?
  age           Int?
  bio           String?
  phone         String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[] 
}

model CakeFlavor {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  price         Float
  description   String    @db.Text
  image         String?
    
  reviews       Review[]
}

model Review {
  id               Int         @id @default(autoincrement())
  cake_flavor_id   Int     
  rating           Int
  comment          String      @db.Text
  user_id          String

  user             User        @relation(fields: [user_id], references: [id]) 
  cakeFlavor       CakeFlavor  @relation(fields: [cake_flavor_id], references: [id])
}
